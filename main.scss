@use "sass:list";

/*
pug index.pug -w
sass main.scss:main.css -w
*/

// $rows: 100;
// $columns: 100;

// $colors: ("white", "red", "lime");
$colors: 3;

@function repeat-string($character, $n){
	$c: "";
	@for $i from 1 through $n {
		$c: $c + $character;
	}
	@return $c;
}

:root {
	color-scheme: dark;
	--pixel-size: 4px;
	block-size: 100%;

	--color-0: white;
	--color-1: white;
	--color-2: white;

	// --rows: #{$rows};
	// --columns: #{$columns};
}

body {
	color: white;
	background-color: black;
	min-block-size: 100%;
	margin: 0;
	box-sizing: border-box;
	font-family: system-ui, sans-serif;
	display: flex;
	flex-direction: column;
}

// .test {
// 	--play-state-1: paused;
// 	--play-state-2: paused;

// 	animation: 0ms linear 1ms forwards var(--play-state-1) color-red, 0ms linear 1ms forwards var(--play-state-2) color-lime;

// 	@keyframes color-red {
// 		to {
// 			background-color: red;
// 		}
// 	}

// 	@keyframes color-lime {
// 		to {
// 			background-color: lime;
// 		}
// 	}
// }

// ._1:hover ~ .test {
// 	--play-state-1: running;
// }

// ._2:hover ~ .test {
// 	--play-state-2: running;
// }

.canvas {
	// background-color: #8884;
	display: grid;
	grid-template-columns: repeat(var(--columns), 1fr);
	margin: 1rem;
	inline-size: fit-content;
	// padding: 1px;
	border: 1px solid #8884;
}

.pixel {
	inline-size: var(--pixel-size);
	block-size: var(--pixel-size);
	// --color: transparent;
	// background-color: var(--color);
	$animation-string: "";

	@for $index from 0 to $colors {
		// $color: list.nth($colors, $index);
		--play-state-color-#{$index}: paused;
		@if ($index >= 1) {
			$animation-string: $animation-string + ", ";
		}
		$animation-string: $animation-string + "0ms linear 1ms forwards var(--play-state-color-#{$index}) color-#{$index}";

		@keyframes color-#{$index} {
			to {
				// --color: #{$color};
				border-radius: 50%;
				// background-color: var(--color);
				// box-shadow: 0 0 0 2px var(--color);
				// background-color: #{$color};
				// box-shadow: 0 0 0 2px #{$color};
				background-color: var(--color-#{$index});
				box-shadow: 0 0 0 2px var(--color-#{$index});
			}
		}

		.color-chooser:has(> label.color-#{$index} > input[type=radio]:checked) ~ .canvas:active &:hover {
			// color: lime;
			--play-state-color-#{$index}: running;
		}
	}
	animation: #{$animation-string};
}

.color-settings {
	padding: 1rem;
	display: flex;
	flex-direction: column;
	gap: 1rem;

	.style-container {
		font-size: 2rem;
		overflow: hidden;
		--line-height: 1.5em;
		block-size: var(--line-height);
		line-height: var(--line-height);
		border-radius: .3rem;

		> style {
			margin-block-start: calc(var(--line-height) * -1);
			display: block;
			white-space: pre;
			overflow: hidden;
			padding-inline: .3rem;
			block-size: 10rem;

			&:focus {
				outline: none;
				background-color: #8883;
			}
		}
	}
}

// .pixel:has(#{repeat-string("+ .pixel", $columns * 2 - 2)} + .pixel:hover),
// .pixel:has(#{repeat-string("+ .pixel", $columns * 2 - 1)} + .pixel:hover),
// .pixel:has(#{repeat-string("+ .pixel", $columns * 2 + 0)} + .pixel:hover),
// .pixel:has(#{repeat-string("+ .pixel", $columns - 3)} + .pixel:hover),
// .pixel:has(#{repeat-string("+ .pixel", $columns - 2)} + .pixel:hover),
// .pixel:has(#{repeat-string("+ .pixel", $columns - 1)} + .pixel:hover),
// .pixel:has(#{repeat-string("+ .pixel", $columns + 0)} + .pixel:hover),
// .pixel:has(#{repeat-string("+ .pixel", $columns + 1)} + .pixel:hover),
// .pixel:hover + .pixel + .pixel,
// .pixel:hover + .pixel,
// .pixel:hover,
// .pixel:has(+ .pixel:hover),
// .pixel:has(+ .pixel + .pixel:hover),
// .pixel:hover#{repeat-string(" + .pixel", $columns - 2)},
// .pixel:hover#{repeat-string(" + .pixel", $columns - 1)},
// .pixel:hover#{repeat-string(" + .pixel", $columns + 0)},
// .pixel:hover#{repeat-string(" + .pixel", $columns + 1)},
// .pixel:hover#{repeat-string(" + .pixel", $columns + 2)},
// .pixel:hover#{repeat-string(" + .pixel", $columns * 2 - 1)},
// .pixel:hover#{repeat-string(" + .pixel", $columns * 2 + 0)},
// .pixel:hover#{repeat-string(" + .pixel", $columns * 2 + 1)} {
// 	--play-state: running;
// }
